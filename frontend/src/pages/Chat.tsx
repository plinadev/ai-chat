import React, { useState, useRef, useEffect, useCallback } from "react";
import {
  IoSend,
  IoCloudUpload,
  IoDocument,
  IoClose,
  IoTimeOutline,
} from "react-icons/io5";
import Layout from "../components/layout/Layout";
import logo from "../assets/logo.svg";
import toast from "react-hot-toast";

interface Message {
  id: string;
  type: "user" | "bot";
  content: string;
  timestamp: Date;
}

interface FileUpload {
  file: File;
  status: "pending" | "processing" | "success" | "error";
  name: string;
  size: number;
}

function Chat() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState("");
  const [uploadedFile, setUploadedFile] = useState<FileUpload | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleFileSelect = (file: File) => {
    if (file.type !== "application/pdf") {
      toast.error("Please upload PDF file only.");
      return;
    }

    if (file.size > 10 * 1024 * 1024) {
      toast.error("File size must be less than 10MB.");
      return;
    }

    const newUpload: FileUpload = {
      file,
      status: "pending",
      name: file.name,
      size: file.size,
    };

    setUploadedFile(newUpload);

    // Simulate upload and processing
    setTimeout(() => {
      setUploadedFile((prev) =>
        prev ? { ...prev, status: "processing" } : null
      );
    }, 500);

    setTimeout(() => {
      setUploadedFile((prev) => (prev ? { ...prev, status: "success" } : null));
    }, 3000);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);

    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      handleFileSelect(files[0]);
    }
  };

  const removeFile = () => {
    setUploadedFile(null);
    setMessages([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  const handleSendMessage = () => {
    if (!inputValue.trim() || uploadedFile?.status !== "success") return;

    const userMessage: Message = {
      id: Date.now().toString(),
      type: "user",
      content: inputValue.trim(),
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputValue("");

    // Simulate bot response
    setTimeout(() => {
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        type: "bot",
        content: `Based on the uploaded PDF "${uploadedFile.name}", I can help answer your question: "${userMessage.content}". This is a simulated response - in a real implementation, this would be generated by your AI backend after searching through the document chunks.`,
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, botMessage]);
    }, 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  const canChat = uploadedFile?.status === "success";

  return (
    <Layout>
      <div className=" w-full h-screen p-10 flex flex-col ">
        <div className="flex flex-col w-full h-full bg-base-100 rounded-2xl shadow-lg">
          <div className="navbar shadow-lg shadow-teal-600/10 shadow-b-2 shadow-r-[3px] -shadow-spread-2">
            <div className="flex pl-5 flex-row items-center gap-3">
              <img
                src={logo}
                alt="Chat icon"
                className="w-10 h-10 opacity-90"
              />
              <h1 className="text-lg font-bold text-base-content">
                PDF Chat Assistant
              </h1>
            </div>
          </div>

          <div className="h-full flex flex-col overflow-hidden">
            {/* File Upload Section */}
            {!uploadedFile && (
              <div className="h-full flex items-center justify-center p-8">
                <div className="text-center max-w-md">
                  <div
                    className={`border-2 border-dashed rounded-lg p-8 transition-all duration-200 ${
                      isDragOver
                        ? "border-primary bg-primary/5"
                        : "border-base-300 hover:border-primary/50"
                    }`}
                    onDrop={handleDrop}
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                  >
                    <IoCloudUpload
                      size={48}
                      className="mx-auto text-[var(--color-logo-yellow)]/60 mb-4"
                    />
                    <h3 className="text-lg font-semibold text-base-content mb-2">
                      Upload a PDF to get started
                    </h3>
                    <p className="text-base-content/70 mb-4">
                      Drag and drop your PDF here, or click to browse
                    </p>
                    <button
                      className="btn btn-primary"
                      onClick={() => fileInputRef.current?.click()}
                    >
                      Choose PDF File
                    </button>
                    <p className="text-sm text-base-content/60 mt-2">
                      Maximum file size: 10MB
                    </p>
                  </div>
                  <input
                    ref={fileInputRef}
                    type="file"
                    accept=".pdf"
                    className="hidden"
                    onChange={handleFileInputChange}
                  />
                </div>
              </div>
            )}

            {/* File Status Section */}
            {uploadedFile && (
              <div className="flex mt-8 py-2 px-4 mx-4 bg-gradient-to-r from-[var(--color-logo-yellow)]/70 via-[var(--color-success)]/70 to-[var(--color-logo-teal)]/70 rounded-xl lg:w-[50%] lg:self-center">
                <div className="flex w-full items-center justify-between ">
                  <div className="flex space-x-2 items-center">
                    <IoDocument size={20} />
                    <div>
                      <div className="font-medium text-base-content">
                        {uploadedFile.name}
                      </div>
                      <div className="text-sm text-base-content/70">
                        {formatFileSize(uploadedFile.size)}
                      </div>
                    </div>
                  </div>
                  {canChat && (
                    <button
                      className="btn btn-ghost btn-sm btn-circle text-accent border-none hover:text-white hover:bg-primary transition-colors duration-300"
                      onClick={removeFile}
                      title="Remove file"
                    >
                      <IoClose size={18} />
                    </button>
                  )}
                </div>
              </div>
            )}

            {uploadedFile && (
              <div
                ref={chatContainerRef}
                className="flex-1 overflow-y-auto my-2 space-y-4 lg:w-[50%] lg:self-center"
              >
                {messages.length === 0 && canChat && (
                  <div className="flex items-center justify-center h-full text-center text-3xl text-base-content/70 py-8 ">
                    <p className="font-bold">
                      Ask any question about your{" "}
                      <span className="text-[var(--color-logo-yellow)]">
                        PDF
                      </span>{" "}
                      <br />
                      to get instant answers!
                    </p>
                  </div>
                )}

                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`chat ${
                      message.type === "user" ? "chat-end" : "chat-start"
                    }`}
                  >
                    <div
                      className={`chat-bubble rounded-xl chat-bubble-neutral `}
                    >
                      {message.content}
                    </div>
                    <div className="chat-footer opacity-50 text-xs">
                      {message.timestamp.toLocaleTimeString()}
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            )}

            {/* Input Section */}
            <div className="flex flex-col p-4 border-t-1 border-base-300 lg:items-center">
              {!canChat && (
                <div className="mb-4 p-3 bg-warning/10 border border-warning/20 rounded-lg lg:w-[50%]">
                  <div className="flex items-center space-x-2 text-warning">
                    <IoTimeOutline size={16} />
                    <span className="text-sm">
                      Please wait for the document to be processed before asking
                      questions.
                    </span>
                  </div>
                </div>
              )}

              <div className="flex space-x-2 lg:w-[50%]">
                <div className="flex-1 ">
                  <input
                    value={inputValue}
                    onChange={(e) => setInputValue(e.target.value)}
                    onKeyDown={handleKeyPress}
                    placeholder={
                      canChat
                        ? "Ask a question about your PDF..."
                        : "Upload and process a PDF first..."
                    }
                    disabled={!canChat}
                    className="input w-full h-12 rounded-lg"
                  />
                </div>
                <button
                  onClick={handleSendMessage}
                  disabled={!canChat || !inputValue.trim()}
                  className="flex items-center h-12 w-12 btn btn-primary btn-square bg-[var(--color-logo-yellow)]/80 border-none cursor-pointer rounded-lg"
                >
                  <IoSend size={18} />
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}

export default Chat;
